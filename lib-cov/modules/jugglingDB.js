/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/jugglingDB.js']) {
  _$jscoverage['modules/jugglingDB.js'] = [];
  _$jscoverage['modules/jugglingDB.js'][1] = 0;
  _$jscoverage['modules/jugglingDB.js'][3] = 0;
  _$jscoverage['modules/jugglingDB.js'][4] = 0;
  _$jscoverage['modules/jugglingDB.js'][6] = 0;
  _$jscoverage['modules/jugglingDB.js'][8] = 0;
  _$jscoverage['modules/jugglingDB.js'][10] = 0;
  _$jscoverage['modules/jugglingDB.js'][11] = 0;
  _$jscoverage['modules/jugglingDB.js'][19] = 0;
  _$jscoverage['modules/jugglingDB.js'][21] = 0;
  _$jscoverage['modules/jugglingDB.js'][22] = 0;
  _$jscoverage['modules/jugglingDB.js'][25] = 0;
  _$jscoverage['modules/jugglingDB.js'][29] = 0;
  _$jscoverage['modules/jugglingDB.js'][33] = 0;
  _$jscoverage['modules/jugglingDB.js'][35] = 0;
  _$jscoverage['modules/jugglingDB.js'][36] = 0;
  _$jscoverage['modules/jugglingDB.js'][39] = 0;
  _$jscoverage['modules/jugglingDB.js'][42] = 0;
  _$jscoverage['modules/jugglingDB.js'][43] = 0;
  _$jscoverage['modules/jugglingDB.js'][44] = 0;
  _$jscoverage['modules/jugglingDB.js'][45] = 0;
  _$jscoverage['modules/jugglingDB.js'][46] = 0;
  _$jscoverage['modules/jugglingDB.js'][48] = 0;
  _$jscoverage['modules/jugglingDB.js'][49] = 0;
  _$jscoverage['modules/jugglingDB.js'][50] = 0;
  _$jscoverage['modules/jugglingDB.js'][58] = 0;
  _$jscoverage['modules/jugglingDB.js'][59] = 0;
  _$jscoverage['modules/jugglingDB.js'][60] = 0;
  _$jscoverage['modules/jugglingDB.js'][64] = 0;
  _$jscoverage['modules/jugglingDB.js'][69] = 0;
  _$jscoverage['modules/jugglingDB.js'][73] = 0;
  _$jscoverage['modules/jugglingDB.js'][74] = 0;
}
_$jscoverage['modules/jugglingDB.js'][1]++;
(function (plastic) {
  _$jscoverage['modules/jugglingDB.js'][3]++;
  function plasticModule() {
    _$jscoverage['modules/jugglingDB.js'][4]++;
    var plastic = this;
    _$jscoverage['modules/jugglingDB.js'][6]++;
    var plasticFunctions = {all: (function (callback) {
  _$jscoverage['modules/jugglingDB.js'][8]++;
  if (typeof plastic.Model === "function") {
    _$jscoverage['modules/jugglingDB.js'][10]++;
    plastic.Model.all((function (err, data) {
  _$jscoverage['modules/jugglingDB.js'][11]++;
  callback(err, data);
}));
  }
}), create: (function (data, callback) {
  _$jscoverage['modules/jugglingDB.js'][19]++;
  if (typeof plastic.Model === "function") {
    _$jscoverage['modules/jugglingDB.js'][21]++;
    plastic.Model.create(data, (function (err, data) {
  _$jscoverage['modules/jugglingDB.js'][22]++;
  callback(err, [data]);
}));
  }
  else {
    _$jscoverage['modules/jugglingDB.js'][25]++;
    callback(null, this);
  }
}), createAll: (function (dataArray, callback) {
  _$jscoverage['modules/jugglingDB.js'][29]++;
  var i, results = [], errorOccured = false;
  _$jscoverage['modules/jugglingDB.js'][33]++;
  if (typeof plastic.Model === "function") {
    _$jscoverage['modules/jugglingDB.js'][35]++;
    for (i = 0; i < dataArray.length; i = i + 1) {
      _$jscoverage['modules/jugglingDB.js'][36]++;
      plastic.Model.create(dataArray[i], onCreate);
}
  }
  else {
    _$jscoverage['modules/jugglingDB.js'][39]++;
    callback(null, this);
  }
  _$jscoverage['modules/jugglingDB.js'][42]++;
  function onCreate(err, data) {
    _$jscoverage['modules/jugglingDB.js'][43]++;
    if (! errorOccured) {
      _$jscoverage['modules/jugglingDB.js'][44]++;
      if (err) {
        _$jscoverage['modules/jugglingDB.js'][45]++;
        errorOccured = false;
        _$jscoverage['modules/jugglingDB.js'][46]++;
        callback(err, results);
      }
      else {
        _$jscoverage['modules/jugglingDB.js'][48]++;
        results.push(data);
        _$jscoverage['modules/jugglingDB.js'][49]++;
        if (results.length >= dataArray.length) {
          _$jscoverage['modules/jugglingDB.js'][50]++;
          callback(null, results);
        }
      }
    }
}
}), destroy: (function (callback) {
  _$jscoverage['modules/jugglingDB.js'][58]++;
  this.each((function (record) {
  _$jscoverage['modules/jugglingDB.js'][59]++;
  record.destroy((function (err, data) {
  _$jscoverage['modules/jugglingDB.js'][60]++;
  console.log("TODO: Destroy should be parallel async!");
}));
}));
  _$jscoverage['modules/jugglingDB.js'][64]++;
  callback(null, []);
})};
    _$jscoverage['modules/jugglingDB.js'][69]++;
    this.use(plasticFunctions, true);
}
  _$jscoverage['modules/jugglingDB.js'][73]++;
  if (plastic) {
    _$jscoverage['modules/jugglingDB.js'][73]++;
    plastic.modules.math = plasticModule;
  }
  _$jscoverage['modules/jugglingDB.js'][74]++;
  if (module) {
    _$jscoverage['modules/jugglingDB.js'][74]++;
    module.exports = plasticModule;
  }
})(this.plastic);
_$jscoverage['modules/jugglingDB.js'].source = ["(function (plastic) {","","\tfunction plasticModule() {","\t\tvar plastic = this;","\t\t// Model will store the model object specified for each plastic instance","\t\tvar plasticFunctions = {","\t\t\tall: function (callback) {","\t\t\t\tif (typeof plastic.Model === \"function\") {","\t\t\t\t\t// Fetch everything from the db and ... cue callbacks ? wtf ?","\t\t\t\t\tplastic.Model.all(function (err, data) {","\t\t\t\t\t\tcallback(err, data);","\t\t\t\t\t});","\t\t\t\t}","\t\t\t},","\t\t\t/**","\t\t\t * Create a new model instance and adds it to both the root context and current context","\t\t\t */","\t\t\tcreate: function (data, callback) {","\t\t\t\tif (typeof plastic.Model === \"function\") {","\t\t\t\t\t// Cut out the context argument","\t\t\t\t\tplastic.Model.create(data, function(err, data) {","\t\t\t\t\t\tcallback(err, [data])","\t\t\t\t\t});","\t\t\t\t} else {","\t\t\t\t\tcallback(null, this);","\t\t\t\t}","\t\t\t},","\t\t\tcreateAll: function (dataArray, callback) {","\t\t\t\tvar","\t\t\t\t\t\ti,","\t\t\t\t\t\tresults = [],","\t\t\t\t\t\terrorOccured = false;","\t\t\t\tif (typeof plastic.Model === \"function\") {","\t\t\t\t\t// Cut out the context argument","\t\t\t\t\tfor (i = 0; i &lt; dataArray.length; i = i + 1) {","\t\t\t\t\t\tplastic.Model.create(dataArray[i], onCreate);","\t\t\t\t\t}","\t\t\t\t} else {","\t\t\t\t\tcallback(null, this);","\t\t\t\t}","","\t\t\t\tfunction onCreate (err, data) {","\t\t\t\t\tif (!errorOccured) {","\t\t\t\t\t\tif (err) {","\t\t\t\t\t\t\terrorOccured = false;","\t\t\t\t\t\t\tcallback(err, results);","\t\t\t\t\t\t} else {","\t\t\t\t\t\t\tresults.push(data);","\t\t\t\t\t\t\tif (results.length &gt;= dataArray.length) {","\t\t\t\t\t\t\t\tcallback(null, results)","\t\t\t\t\t\t\t} // Else keep waiting for more callbacks","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t},","\t\t\tdestroy: function (callback) {","\t\t\t\t// Fetch everything from the db and ... cue callbacks ? wtf ?","\t\t\t\tthis.each(function (record) {","\t\t\t\t\trecord.destroy(function (err, data) {","\t\t\t\t\t\tconsole.log(\"TODO: Destroy should be parallel async!\");","\t\t\t\t\t});","\t\t\t\t});","\t\t\t\t// todo: call this callback after all destroy worked in parrallel","\t\t\t\tcallback(null, []);","\t\t\t}","\t\t};","","\t\t// Add the model functions as async function","\t\tthis.use(plasticFunctions, true);","\t}","","\t// Export as either a global or a module","\tif (plastic) plastic.modules.math = plasticModule;","\tif (module) module.exports = plasticModule;","","})(this.plastic);",""];
