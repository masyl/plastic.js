/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['modules/model.js']) {
  _$jscoverage['modules/model.js'] = [];
  _$jscoverage['modules/model.js'][1] = 0;
  _$jscoverage['modules/model.js'][3] = 0;
  _$jscoverage['modules/model.js'][5] = 0;
  _$jscoverage['modules/model.js'][6] = 0;
  _$jscoverage['modules/model.js'][13] = 0;
  _$jscoverage['modules/model.js'][14] = 0;
  _$jscoverage['modules/model.js'][16] = 0;
  _$jscoverage['modules/model.js'][22] = 0;
  _$jscoverage['modules/model.js'][23] = 0;
  _$jscoverage['modules/model.js'][25] = 0;
  _$jscoverage['modules/model.js'][26] = 0;
  _$jscoverage['modules/model.js'][28] = 0;
  _$jscoverage['modules/model.js'][30] = 0;
  _$jscoverage['modules/model.js'][32] = 0;
  _$jscoverage['modules/model.js'][39] = 0;
  _$jscoverage['modules/model.js'][44] = 0;
  _$jscoverage['modules/model.js'][53] = 0;
  _$jscoverage['modules/model.js'][54] = 0;
  _$jscoverage['modules/model.js'][55] = 0;
  _$jscoverage['modules/model.js'][60] = 0;
  _$jscoverage['modules/model.js'][62] = 0;
  _$jscoverage['modules/model.js'][64] = 0;
  _$jscoverage['modules/model.js'][67] = 0;
  _$jscoverage['modules/model.js'][72] = 0;
  _$jscoverage['modules/model.js'][73] = 0;
}
_$jscoverage['modules/model.js'][1]++;
(function (plastic) {
  _$jscoverage['modules/model.js'][3]++;
  function plasticModule() {
    _$jscoverage['modules/model.js'][5]++;
    var Model;
    _$jscoverage['modules/model.js'][6]++;
    var functions = {model: (function (context, model) {
  _$jscoverage['modules/model.js'][13]++;
  if (model) {
    _$jscoverage['modules/model.js'][14]++;
    Model = model;
  }
  _$jscoverage['modules/model.js'][16]++;
  return this.chain;
}), create: (function () {
  _$jscoverage['modules/model.js'][22]++;
  if (typeof Model === "function") {
    _$jscoverage['modules/model.js'][23]++;
    var construstor = functionnalConstructor(Model);
    _$jscoverage['modules/model.js'][25]++;
    var args = Array.prototype.slice.call(arguments, 1);
    _$jscoverage['modules/model.js'][26]++;
    var model = construstor.apply(this, args);
    _$jscoverage['modules/model.js'][28]++;
    this.rootContext.push(model);
    _$jscoverage['modules/model.js'][30]++;
    return this.next([model]);
  }
  else {
    _$jscoverage['modules/model.js'][32]++;
    return this.chain;
  }
}), all: (function all() {
  _$jscoverage['modules/model.js'][39]++;
  return this.next(this.rootContext);
})};
    _$jscoverage['modules/model.js'][44]++;
    this.use(functions);
}
  _$jscoverage['modules/model.js'][53]++;
  function functionnalConstructor(Constructor) {
    _$jscoverage['modules/model.js'][54]++;
    return (function () {
  _$jscoverage['modules/model.js'][55]++;
  var args = Array.prototype.slice.call(arguments, 0), Temp = (function () {
}), inst, ret;
  _$jscoverage['modules/model.js'][60]++;
  Temp.prototype = Constructor.prototype;
  _$jscoverage['modules/model.js'][62]++;
  inst = new Temp();
  _$jscoverage['modules/model.js'][64]++;
  ret = Constructor.apply(inst, args);
  _$jscoverage['modules/model.js'][67]++;
  return Object(ret) === ret? ret: inst;
});
}
  _$jscoverage['modules/model.js'][72]++;
  if (plastic) {
    _$jscoverage['modules/model.js'][72]++;
    plastic.modules.math = plasticModule;
  }
  _$jscoverage['modules/model.js'][73]++;
  if (module) {
    _$jscoverage['modules/model.js'][73]++;
    module.exports = plasticModule;
  }
})(this.plastic);
_$jscoverage['modules/model.js'].source = ["(function (plastic) {","","\tfunction plasticModule() {","\t\t// Model will store the model object specified for each plastic instance","\t\tvar Model;","\t\tvar functions = {","\t\t\t/**","\t\t\t * Specify the constructor for creating new instance of the model","\t\t\t * @param context","\t\t\t * @param model","\t\t\t */","\t\t\tmodel: function (context, model) {","\t\t\t\tif (model) {","\t\t\t\t\tModel = model;","\t\t\t\t}","\t\t\t\treturn this.chain;","\t\t\t},","\t\t\t/**","\t\t\t * Create a new model instance and adds it to both the root context and current context","\t\t\t */","\t\t\tcreate: function () {","\t\t\t\tif (typeof Model === \"function\") {","\t\t\t\t\tvar construstor = functionnalConstructor(Model);","\t\t\t\t\t// Cut out the context argument","\t\t\t\t\tvar args = Array.prototype.slice.call(arguments, 1);","\t\t\t\t\tvar model = construstor.apply(this, args);","\t\t\t\t\t// Add the new instance to the rootContext","\t\t\t\t\tthis.rootContext.push(model);","\t\t\t\t\t// And also pass it as the next context","\t\t\t\t\treturn this.next([model]);","\t\t\t\t} else {","\t\t\t\t\treturn this.chain;","\t\t\t\t}","\t\t\t},","\t\t\t/**","\t\t\t * Return a new context with all the items in it","\t\t\t */","\t\t\tall: function all() {","\t\t\t\treturn this.next(this.rootContext);","\t\t\t}","\t\t};","","\t\t// Add the model functions","\t\tthis.use(functions);","\t}","","\t/**","\t * Transform a constructor so that it can be call like a normal function","\t * without changing its original behavior","\t * (without the \"new\" instruction)","\t * @param Constructor","\t */","\tfunction functionnalConstructor(Constructor) {","\t\treturn function() {","\t\t\tvar args = Array.prototype.slice.call(arguments, 0),","\t\t\t\tTemp = function () {}, // temporary constructor","\t\t\t\tinst,","\t\t\t\tret;","\t\t\t// Give the Temp constructor the Constructor's prototype","\t\t\tTemp.prototype = Constructor.prototype;","\t\t\t// Create a new instance","\t\t\tinst = new Temp;","\t\t\t// Call the original Constructor with the temp instance as its context (i.e. its 'this' value)","\t\t\tret = Constructor.apply(inst, args);","\t\t\t// If an object has been returned then return it otherwise return the original instance.","\t\t\t// (consistent with behaviour of the new operator)","\t\t\treturn Object(ret) === ret ? ret : inst;","\t\t}","\t}","","\t// Export as either a global or a module","\tif (plastic) plastic.modules.math = plasticModule;","\tif (module) module.exports = plasticModule;","","})(this.plastic);",""];
