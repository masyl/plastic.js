/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['plastic.js']) {
  _$jscoverage['plastic.js'] = [];
  _$jscoverage['plastic.js'][1] = 0;
  _$jscoverage['plastic.js'][3] = 0;
  _$jscoverage['plastic.js'][10] = 0;
  _$jscoverage['plastic.js'][18] = 0;
  _$jscoverage['plastic.js'][19] = 0;
  _$jscoverage['plastic.js'][21] = 0;
  _$jscoverage['plastic.js'][23] = 0;
  _$jscoverage['plastic.js'][24] = 0;
  _$jscoverage['plastic.js'][25] = 0;
  _$jscoverage['plastic.js'][27] = 0;
  _$jscoverage['plastic.js'][29] = 0;
  _$jscoverage['plastic.js'][30] = 0;
  _$jscoverage['plastic.js'][36] = 0;
  _$jscoverage['plastic.js'][37] = 0;
  _$jscoverage['plastic.js'][41] = 0;
  _$jscoverage['plastic.js'][42] = 0;
  _$jscoverage['plastic.js'][43] = 0;
  _$jscoverage['plastic.js'][49] = 0;
  _$jscoverage['plastic.js'][50] = 0;
  _$jscoverage['plastic.js'][51] = 0;
  _$jscoverage['plastic.js'][56] = 0;
  _$jscoverage['plastic.js'][60] = 0;
  _$jscoverage['plastic.js'][67] = 0;
  _$jscoverage['plastic.js'][68] = 0;
  _$jscoverage['plastic.js'][69] = 0;
  _$jscoverage['plastic.js'][70] = 0;
  _$jscoverage['plastic.js'][71] = 0;
  _$jscoverage['plastic.js'][73] = 0;
  _$jscoverage['plastic.js'][75] = 0;
  _$jscoverage['plastic.js'][76] = 0;
  _$jscoverage['plastic.js'][77] = 0;
  _$jscoverage['plastic.js'][80] = 0;
  _$jscoverage['plastic.js'][83] = 0;
  _$jscoverage['plastic.js'][93] = 0;
  _$jscoverage['plastic.js'][94] = 0;
  _$jscoverage['plastic.js'][95] = 0;
  _$jscoverage['plastic.js'][96] = 0;
  _$jscoverage['plastic.js'][107] = 0;
  _$jscoverage['plastic.js'][108] = 0;
  _$jscoverage['plastic.js'][116] = 0;
  _$jscoverage['plastic.js'][117] = 0;
  _$jscoverage['plastic.js'][118] = 0;
  _$jscoverage['plastic.js'][119] = 0;
  _$jscoverage['plastic.js'][120] = 0;
  _$jscoverage['plastic.js'][121] = 0;
  _$jscoverage['plastic.js'][129] = 0;
  _$jscoverage['plastic.js'][130] = 0;
  _$jscoverage['plastic.js'][134] = 0;
  _$jscoverage['plastic.js'][135] = 0;
  _$jscoverage['plastic.js'][137] = 0;
  _$jscoverage['plastic.js'][139] = 0;
  _$jscoverage['plastic.js'][141] = 0;
  _$jscoverage['plastic.js'][144] = 0;
  _$jscoverage['plastic.js'][145] = 0;
  _$jscoverage['plastic.js'][146] = 0;
  _$jscoverage['plastic.js'][147] = 0;
  _$jscoverage['plastic.js'][151] = 0;
  _$jscoverage['plastic.js'][153] = 0;
  _$jscoverage['plastic.js'][154] = 0;
  _$jscoverage['plastic.js'][157] = 0;
  _$jscoverage['plastic.js'][159] = 0;
  _$jscoverage['plastic.js'][160] = 0;
  _$jscoverage['plastic.js'][161] = 0;
  _$jscoverage['plastic.js'][171] = 0;
  _$jscoverage['plastic.js'][172] = 0;
  _$jscoverage['plastic.js'][173] = 0;
  _$jscoverage['plastic.js'][178] = 0;
  _$jscoverage['plastic.js'][182] = 0;
  _$jscoverage['plastic.js'][185] = 0;
  _$jscoverage['plastic.js'][186] = 0;
}
_$jscoverage['plastic.js'][1]++;
(function () {
  _$jscoverage['plastic.js'][3]++;
  function plastic(functions) {
    _$jscoverage['plastic.js'][10]++;
    function plasticFactory() {
      _$jscoverage['plastic.js'][18]++;
      function Chain(rootContext, contextInput) {
        _$jscoverage['plastic.js'][19]++;
        var chain = this;
        _$jscoverage['plastic.js'][21]++;
        this.context = [];
        _$jscoverage['plastic.js'][23]++;
        this.rootContext = rootContext;
        _$jscoverage['plastic.js'][24]++;
        this.next = (function next(newContext) {
  _$jscoverage['plastic.js'][25]++;
  return new Chain(chain.rootContext, newContext);
});
        _$jscoverage['plastic.js'][27]++;
        if (contextInput) {
          _$jscoverage['plastic.js'][29]++;
          for (var i = 0; i < contextInput.length; i = i + 1) {
            _$jscoverage['plastic.js'][30]++;
            this.context.push(contextInput[i]);
}
        }
}
      _$jscoverage['plastic.js'][36]++;
      Chain.prototype.emit = (function (functionName, args, _prefix) {
  _$jscoverage['plastic.js'][37]++;
  var listener, chain = this, prefix = _prefix? _prefix + ":": "";
  _$jscoverage['plastic.js'][41]++;
  listener = plasticFactory.listeners[(prefix || "") + functionName];
  _$jscoverage['plastic.js'][42]++;
  if (listener) {
    _$jscoverage['plastic.js'][43]++;
    listener.apply(chain, args);
  }
});
      _$jscoverage['plastic.js'][49]++;
      for (var functionName in plasticFactory.fn) {
        _$jscoverage['plastic.js'][50]++;
        if (plasticFactory.fn.hasOwnProperty(functionName)) {
          _$jscoverage['plastic.js'][51]++;
          Chain.prototype[functionName] = plasticFactory.fn[functionName];
        }
}
      _$jscoverage['plastic.js'][56]++;
      return new Chain([]);
}
    _$jscoverage['plastic.js'][60]++;
    plasticFactory.fn = {};
    _$jscoverage['plastic.js'][67]++;
    plasticFactory.use = (function (nameOrObj, handler) {
  _$jscoverage['plastic.js'][68]++;
  var obj = {};
  _$jscoverage['plastic.js'][69]++;
  if (typeof handler === "function") {
    _$jscoverage['plastic.js'][70]++;
    obj = {};
    _$jscoverage['plastic.js'][71]++;
    obj[nameOrObj] = handler;
  }
  else {
    _$jscoverage['plastic.js'][73]++;
    obj = nameOrObj;
  }
  _$jscoverage['plastic.js'][75]++;
  for (var functionName in obj) {
    _$jscoverage['plastic.js'][76]++;
    if (obj.hasOwnProperty(functionName)) {
      _$jscoverage['plastic.js'][77]++;
      this.fn[functionName] = wrapper(functionName, obj[functionName]);
    }
}
  _$jscoverage['plastic.js'][80]++;
  return this;
});
    _$jscoverage['plastic.js'][83]++;
    plasticFactory.listeners = {};
    _$jscoverage['plastic.js'][93]++;
    plasticFactory.on = (function (functionName, handler, _prefix) {
  _$jscoverage['plastic.js'][94]++;
  var prefix = _prefix? _prefix + ":": "";
  _$jscoverage['plastic.js'][95]++;
  if (functionName && handler) {
    _$jscoverage['plastic.js'][96]++;
    plasticFactory.listeners[prefix + functionName] = handler;
  }
});
    _$jscoverage['plastic.js'][107]++;
    plasticFactory.onEach = (function (handlerName, handler) {
  _$jscoverage['plastic.js'][108]++;
  plasticFactory.on(handlerName, handler, "each");
});
    _$jscoverage['plastic.js'][116]++;
    function wrapper(handlerName, handler) {
      _$jscoverage['plastic.js'][117]++;
      return (function () {
  _$jscoverage['plastic.js'][118]++;
  var chain = this;
  _$jscoverage['plastic.js'][119]++;
  var args = Array.prototype.slice.call(arguments, 0);
  _$jscoverage['plastic.js'][120]++;
  args.unshift(chain.context);
  _$jscoverage['plastic.js'][121]++;
  var _this = {loop: loop, next: chain.next, args: args, context: chain.context, rootContext: chain.rootContext};
  _$jscoverage['plastic.js'][129]++;
  function loop(handler) {
    _$jscoverage['plastic.js'][130]++;
    var newContext = [], returnValue, contextItem, loopArgs = args.slice(1);
    _$jscoverage['plastic.js'][134]++;
    for (var i = 0; i < chain.context.length; i = i + 1) {
      _$jscoverage['plastic.js'][135]++;
      contextItem = chain.context[i];
      _$jscoverage['plastic.js'][137]++;
      loopArgs.unshift(contextItem);
      _$jscoverage['plastic.js'][139]++;
      chain.emit.call(_this, handlerName, loopArgs, "each");
      _$jscoverage['plastic.js'][141]++;
      returnValue = handler.apply(_this, loopArgs);
      _$jscoverage['plastic.js'][144]++;
      if (typeof returnValue === "undefined" || returnValue === true) {
        _$jscoverage['plastic.js'][145]++;
        newContext.push(contextItem);
      }
      else {
        _$jscoverage['plastic.js'][146]++;
        if (returnValue !== false) {
          _$jscoverage['plastic.js'][147]++;
          newContext.push(returnValue);
        }
      }
      _$jscoverage['plastic.js'][151]++;
      loopArgs.shift(contextItem);
}
    _$jscoverage['plastic.js'][153]++;
    var newChain = new chain.constructor(chain.rootContext, newContext);
    _$jscoverage['plastic.js'][154]++;
    return newChain;
}
  _$jscoverage['plastic.js'][157]++;
  chain.emit.call(_this, handlerName, args);
  _$jscoverage['plastic.js'][159]++;
  var newChainOrReturnValue = handler.apply(_this, args);
  _$jscoverage['plastic.js'][160]++;
  args.pop();
  _$jscoverage['plastic.js'][161]++;
  return newChainOrReturnValue;
});
}
    _$jscoverage['plastic.js'][171]++;
    plasticFactory.fn.tap = (function (handler) {
  _$jscoverage['plastic.js'][172]++;
  handler(this);
  _$jscoverage['plastic.js'][173]++;
  return this;
});
    _$jscoverage['plastic.js'][178]++;
    if (functions) {
      _$jscoverage['plastic.js'][178]++;
      plasticFactory.use(functions);
    }
    _$jscoverage['plastic.js'][182]++;
    return plasticFactory;
}
  _$jscoverage['plastic.js'][185]++;
  if (module && module.exports) {
    _$jscoverage['plastic.js'][185]++;
    module.exports = plastic;
  }
  _$jscoverage['plastic.js'][186]++;
  this.plastic = plastic;
})();
_$jscoverage['plastic.js'].source = ["(function () {","","\tfunction plastic(functions) {","","\t\t/**","\t\t * The core constructor for creating plastic objects.","\t\t * It is responsible for strating the function chaining","\t\t */","\t\t// todo: support adding functions with the factory here ?","\t\tfunction plasticFactory() {","","\t\t\t/**","\t\t\t * Create a new chain constructor for further prototyping","\t\t\t * This object will be user as the \"this\" scope in all function calls","\t\t\t * @param context","\t\t\t */","\t\t\t// Try to externalize it from the Plastic() object","\t\t\tfunction Chain (rootContext, contextInput) {","\t\t\t\tvar chain = this;","\t\t\t\t// Create a new context array;","\t\t\t\tthis.context = [];","\t\t\t\t// store the root context in the chain object","\t\t\t\tthis.rootContext = rootContext;","\t\t\t\tthis.next = function next(newContext) {","\t\t\t\t\treturn new Chain(chain.rootContext, newContext);","\t\t\t\t};","\t\t\t\tif (contextInput) {","\t\t\t\t\t// Transfer all the contextInput into the new context","\t\t\t\t\tfor (var i = 0; i &lt; contextInput.length; i = i + 1) {","\t\t\t\t\t\tthis.context.push(contextInput[i]);","\t\t\t\t\t}","\t\t\t\t}","","\t\t\t}","","\t\t\tChain.prototype.emit = function(functionName, args, _prefix) {","\t\t\t\tvar","\t\t\t\t\t\tlistener,","\t\t\t\t\t\tchain = this,","\t\t\t\t\t\tprefix = (_prefix) ? _prefix + \":\" : \"\";","\t\t\t\tlistener = plasticFactory.listeners[(prefix || \"\") + functionName];","\t\t\t\tif (listener) {","\t\t\t\t\tlistener.apply(chain, args);","\t\t\t\t}","\t\t\t};","","","\t\t\t// add functions to the chain constructor","\t\t\tfor (var functionName in plasticFactory.fn) {","\t\t\t\tif (plasticFactory.fn.hasOwnProperty(functionName)) {","\t\t\t\t\tChain.prototype[functionName] = plasticFactory.fn[functionName];","\t\t\t\t}","\t\t\t}","","\t\t\t// Start a new chain with a fresh root context","\t\t\treturn new Chain([]);","\t\t}","","\t\t// The object that contains all the functions to be added to the main chain' prototype","\t\tplasticFactory.fn = {};","","\t\t/**","\t\t * A new functions to a Plastic object","\t\t * @param nameOrObj Function name or an object containing a literal object with multiple functions","\t\t * @param handler An optionnal handler (when the first argument is a function name)","\t\t */","\t\tplasticFactory.use = function (nameOrObj, handler) {","\t\t\tvar obj = {};","\t\t\tif (typeof(handler) === \"function\") {","\t\t\t\tobj = {};","\t\t\t\tobj[nameOrObj] = handler;","\t\t\t} else {","\t\t\t\tobj = nameOrObj;","\t\t\t}","\t\t\tfor (var functionName in obj) {","\t\t\t\tif (obj.hasOwnProperty(functionName)) {","\t\t\t\t\tthis.fn[functionName] = wrapper(functionName, obj[functionName]);","\t\t\t\t}","\t\t\t}","\t\t\treturn this;","\t\t};","","\t\tplasticFactory.listeners = {};","","\t\t/**","\t\t * Add an event listener on any function call.","\t\t * The listener will be triggered once with the whole context","\t\t * as an argument","\t\t * @param functionName","\t\t * @param handler","\t\t * @param _prefix","\t\t */","\t\tplasticFactory.on = function (functionName, handler, _prefix) {","\t\t\tvar prefix = (_prefix) ? _prefix + \":\" : \"\";","\t\t\tif (functionName &amp;&amp; handler) {","\t\t\t\tplasticFactory.listeners[prefix+functionName] = handler;","\t\t\t}","\t\t};","","\t\t/**","\t\t * Add an event listener on any function call.","\t\t * The listener will be triggered individually for each item","\t\t * of the context","\t\t * @param handlerName","\t\t * @param handler","\t\t */","\t\tplasticFactory.onEach = function (handlerName, handler) {","\t\t\tplasticFactory.on(handlerName, handler, \"each\");","\t\t};","","\t\t/**","\t\t * Internal function wrapper used for all functions added to a plastic object","\t\t * via the \"use\" function","\t\t * @param handler","\t\t */","\t\tfunction wrapper(handlerName, handler) {","\t\t\treturn function () {","\t\t\t\tvar chain = this;","\t\t\t\tvar args = Array.prototype.slice.call(arguments, 0);","\t\t\t\targs.unshift(chain.context);","\t\t\t\tvar _this = {","\t\t\t\t\tloop: loop,","\t\t\t\t\tnext: chain.next,","\t\t\t\t\targs: args,","\t\t\t\t\tcontext: chain.context,","\t\t\t\t\trootContext: chain.rootContext","\t\t\t\t};","\t\t\t\t// Create a fresh loop handler","\t\t\t\tfunction loop(handler) {","\t\t\t\t\tvar newContext = [],","\t\t\t\t\t\treturnValue,","\t\t\t\t\t\tcontextItem,","\t\t\t\t\t\tloopArgs = args.slice(1);","\t\t\t\t\tfor (var i = 0; i &lt; chain.context.length; i = i + 1) {","\t\t\t\t\t\tcontextItem = chain.context[i];","\t\t\t\t\t\t// Put the contextItem as the first argument","\t\t\t\t\t\tloopArgs.unshift(contextItem);","\t\t\t\t\t\t// Emit an event before the handler is called","\t\t\t\t\t\tchain.emit.call(_this, handlerName, loopArgs, \"each\");","\t\t\t\t\t\t// Call the handler","\t\t\t\t\t\treturnValue = handler.apply(_this, loopArgs);","\t\t\t\t\t\t// If the loop handler return undefined or true, the item is","\t\t\t\t\t\t// added to the new context, otherwise it is not.","\t\t\t\t\t\tif (typeof returnValue === \"undefined\" || returnValue === true) {","\t\t\t\t\t\t\tnewContext.push(contextItem);","\t\t\t\t\t\t} else if (returnValue !== false) {","\t\t\t\t\t\t\tnewContext.push(returnValue);","\t\t\t\t\t\t}","\t\t\t\t\t\t// Otherwise, if false, dont add anything back in the context","\t\t\t\t\t\t// Remove the contextItem from the first argument","\t\t\t\t\t\tloopArgs.shift(contextItem);","\t\t\t\t\t}","\t\t\t\t\tvar newChain = new chain.constructor(chain.rootContext, newContext);","\t\t\t\t\treturn newChain;","\t\t\t\t}","\t\t\t\t// Emit an event before the handler is called","\t\t\t\tchain.emit.call(_this, handlerName, args);","\t\t\t\t// Call the handler","\t\t\t\tvar newChainOrReturnValue = handler.apply(_this, args);","\t\t\t\targs.pop();","\t\t\t\treturn newChainOrReturnValue;","\t\t\t};","\t\t}","","\t\t/**","\t\t * Core function for intercepting a chain and plating your the context","\t\t * Usefull for logging, debugging and ad-hoc operations","\t\t * @param handler","\t\t */","\t\t// todo: add this function through the \"use\" function","\t\tplasticFactory.fn.tap = function (handler) {","\t\t\thandler(this);","\t\t\treturn this;","\t\t};","","","\t\t// Add functions to the new Plastic constructor","\t\tif (functions) plasticFactory.use(functions);","","\t\t// Return the new Plastic constructor","\t\t// todo: support multiple instances without the \"require\" mechanism","\t\treturn plasticFactory;","\t}","","\tif (module &amp;&amp; module.exports) module.exports = plastic;","\tthis.plastic = plastic;","","","})();",""];
