/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['plasticModel.js']) {
  _$jscoverage['plasticModel.js'] = [];
  _$jscoverage['plasticModel.js'][1] = 0;
  _$jscoverage['plasticModel.js'][3] = 0;
  _$jscoverage['plasticModel.js'][4] = 0;
  _$jscoverage['plasticModel.js'][7] = 0;
  _$jscoverage['plasticModel.js'][12] = 0;
  _$jscoverage['plasticModel.js'][14] = 0;
  _$jscoverage['plasticModel.js'][15] = 0;
  _$jscoverage['plasticModel.js'][17] = 0;
  _$jscoverage['plasticModel.js'][19] = 0;
  _$jscoverage['plasticModel.js'][25] = 0;
  _$jscoverage['plasticModel.js'][29] = 0;
  _$jscoverage['plasticModel.js'][39] = 0;
  _$jscoverage['plasticModel.js'][40] = 0;
  _$jscoverage['plasticModel.js'][41] = 0;
  _$jscoverage['plasticModel.js'][46] = 0;
  _$jscoverage['plasticModel.js'][48] = 0;
  _$jscoverage['plasticModel.js'][50] = 0;
  _$jscoverage['plasticModel.js'][53] = 0;
  _$jscoverage['plasticModel.js'][59] = 0;
  _$jscoverage['plasticModel.js'][60] = 0;
}
_$jscoverage['plasticModel.js'][1]++;
(function (plastic) {
  _$jscoverage['plasticModel.js'][3]++;
  function plasticModelFactory(Model, methods) {
    _$jscoverage['plasticModel.js'][4]++;
    var plasticModel = plastic(methods || {});
    _$jscoverage['plasticModel.js'][7]++;
    plasticModel.use({create: (function () {
  _$jscoverage['plasticModel.js'][12]++;
  var construstor = functionnalConstructor(Model);
  _$jscoverage['plasticModel.js'][14]++;
  var args = Array.prototype.slice.call(arguments, 1);
  _$jscoverage['plasticModel.js'][15]++;
  var model = construstor.apply(this, args);
  _$jscoverage['plasticModel.js'][17]++;
  this.rootContext.push(model);
  _$jscoverage['plasticModel.js'][19]++;
  return this.next([model]);
}), all: (function all() {
  _$jscoverage['plasticModel.js'][25]++;
  return this.next(this.rootContext);
})});
    _$jscoverage['plasticModel.js'][29]++;
    return plasticModel;
}
  _$jscoverage['plasticModel.js'][39]++;
  function functionnalConstructor(Constructor) {
    _$jscoverage['plasticModel.js'][40]++;
    return (function () {
  _$jscoverage['plasticModel.js'][41]++;
  var args = Array.prototype.slice.call(arguments, 0), Temp = (function () {
}), inst, ret;
  _$jscoverage['plasticModel.js'][46]++;
  Temp.prototype = Constructor.prototype;
  _$jscoverage['plasticModel.js'][48]++;
  inst = new Temp();
  _$jscoverage['plasticModel.js'][50]++;
  ret = Constructor.apply(inst, args);
  _$jscoverage['plasticModel.js'][53]++;
  return Object(ret) === ret? ret: inst;
});
}
  _$jscoverage['plasticModel.js'][59]++;
  if (module) {
    _$jscoverage['plasticModel.js'][59]++;
    module.exports = plasticModelFactory;
  }
  _$jscoverage['plasticModel.js'][60]++;
  this.plasticModel = plasticModelFactory;
})(require && require("./plastic") || this.plastic);
_$jscoverage['plasticModel.js'].source = ["(function (plastic) {","","\tfunction plasticModelFactory(Model, methods) {","\t\tvar plasticModel = plastic(methods || {});","","\t\t// Add the modeling methods, overriding any user-defined methods","\t\tplasticModel.use({","\t\t\t/**","\t\t\t * Create a new model instance and adds it to both the root context and current context","\t\t\t */","\t\t\tcreate: function () {","\t\t\t\tvar construstor = functionnalConstructor(Model);","\t\t\t\t// Cut out the context argument","\t\t\t\tvar args = Array.prototype.slice.call(arguments, 1);","\t\t\t\tvar model = construstor.apply(this, args);","\t\t\t\t// Add the new instance to the rootContext","\t\t\t\tthis.rootContext.push(model);","\t\t\t\t// And also pass it as the next context","\t\t\t\treturn this.next([model]);","\t\t\t},","\t\t\t/**","\t\t\t * Return a new context with all the items in it","\t\t\t */","\t\t\tall: function all() {","\t\t\t\treturn this.next(this.rootContext);","\t\t\t}","\t\t});","","\t\treturn plasticModel;","\t}","","","\t/**","\t * Transform a constructor so that it can be call like a normal function","\t * without changing its original behavior","\t * (without the \"new\" instruction)","\t * @param Constructor","\t */","\tfunction functionnalConstructor(Constructor) {","\t\treturn function() {","\t\t\tvar args = Array.prototype.slice.call(arguments, 0),","\t\t\t\tTemp = function () {}, // temporary constructor","\t\t\t\tinst,","\t\t\t\tret;","\t\t\t// Give the Temp constructor the Constructor's prototype","\t\t\tTemp.prototype = Constructor.prototype;","\t\t\t// Create a new instance","\t\t\tinst = new Temp;","\t\t\t// Call the original Constructor with the temp instance as its context (i.e. its 'this' value)","\t\t\tret = Constructor.apply(inst, args);","\t\t\t// If an object has been returned then return it otherwise return the original instance.","\t\t\t// (consistent with behaviour of the new operator)","\t\t\treturn Object(ret) === ret ? ret : inst;","\t\t}","\t}","","","\t// Export as either a global or a module","\tif (module) module.exports = plasticModelFactory;","\tthis.plasticModel = plasticModelFactory;","","})(require &amp;&amp; require(\"./plastic\") || this.plastic);",""];
